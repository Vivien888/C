答：
(a)的错误是在每个 case 分支中都缺少了 break; 语句，
造成的后果是一旦执行了前面的 case 分支，必定还会继续执行接下来的其他 case 分支，与程序的预期不符。

修改后如下：
unsigned aCnt = 0, eCnt = 0, iouCnt = 0;
    char ch = next_text();
    switch (ch) {
    	case 'a': 
	    	aCnt++; 
	    	break;
    	case 'e': 
	    	eCnt++; 
	    	break;
    	default: 
	    	iouCnt++; 
	    	break;
    }

(b)的错误是在 case 分支中定义并初始化了变量 ix，但同时在 default 分支中使用了该变量，
此时如果控制流跳过 case 分支而直接到达 default 分支，则会试图使用未经初始化的变量，无法通过编译。

修改后如下：
unsigned index = some_value();
int ix;
switch (index) {
    case 1:
        ix = get_value();
        ivec[ ix ] = index;
        break;
    default:
        ix = static_cast<int>(ivec.size())-1;
        ivec[ ix ] = index;
}

(c)的错误是在同一个 case 标签中放置了多个值，而 C++ 规定一个 case 标签只能对应一个值。

修改后如下：
unsigned evenCnt = 0, oddCnt = 0;
int digit = get_num() % 10;
switch (digit) {
    case 1: 
    case 3: 
    case 5: 
    case 7: 
    case 9:
        oddcnt++;
        break;
    case 2: 
    case 4: 
    case 6: 
    case 8: 
    case 0:
        evencnt++;
        break;
}

(d)的错误是使用变量作为 case 标签的内容，C++规定，case 标签的内容只能是整型常量表达式。

修改后如下：
const unsigned ival=512, jval=1024, kval=4096;
unsigned bufsize;
unsigned swt = get_bufCnt();
switch(swt) {
    case ival:
        bufsize = ival * sizeof(int);
        break;
    case jval:
        bufsize = jval * sizeof(int);
        break;
    case kval:
        bufsize = kval * sizeof(int);
        break;
}
